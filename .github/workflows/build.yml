name: OLED Build Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build-firmware-m16a-tty-software-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega16a"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo/tty"
      FIRMWARE_NAME: "tty_sw_twi_m16a"
      PREPROCESSOR: "-DF_CPU=12000000UL"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr0/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m16a-tty-software-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m16a-tty-hardware-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega16a"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo/tty"
      FIRMWARE_NAME: "tty_hw_twi_m16a"
      PREPROCESSOR: "-DF_CPU=12000000UL"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr0/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m16a-tty-hardware-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m16a-frame-software-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega16a"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo/frame"
      FIRMWARE_NAME: "frame_sw_twi_m16a"
      PREPROCESSOR: "-DF_CPU=12000000UL"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr0/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m16a-frame-software-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m16a-frame-hardware-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega16a"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo/frame"
      FIRMWARE_NAME: "frame_hw_twi_m16a"
      PREPROCESSOR: "-DF_CPU=12000000UL"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr0/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m16a-frame-hardware-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m4808-tty-software-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega4808"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo-avr0/tty-avr0"
      FIRMWARE_NAME: "tty_sw_twi_m4808"
      PREPROCESSOR: "-DF_CPU=20000000UL -DOLED_HAL_PLATFORM=avr0"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m4808-tty-software-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m4808-tty-hardware-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega4808"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo-avr0/tty-avr0"
      FIRMWARE_NAME: "tty_hw_twi_m4808"
      PREPROCESSOR: "-DF_CPU=20000000UL -DOLED_HAL_PLATFORM=avr0"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m4808-tty-hardware-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m4808-frame-software-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega4808"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo-avr0/frame-avr0"
      FIRMWARE_NAME: "frame_sw_twi_m4808"
      PREPROCESSOR: "-DF_CPU=20000000UL -DOLED_HAL_PLATFORM=avr0"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m4808-frame-software-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1

  build-firmware-m4808-frame-hardware-twi:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATmega_DFP.2.2.509"
      DEVICE: "atmega4808"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./lib"
      PROJECT_PATH: "./demo-avr0/frame-avr0"
      FIRMWARE_NAME: "frame_hw_twi_m4808"
      PREPROCESSOR: "-DF_CPU=20000000UL -DOLED_HAL_PLATFORM=avr0"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*
        rm -rf ./lib/hal/avr/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}

            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-m4808-frame-hardware-twi
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1